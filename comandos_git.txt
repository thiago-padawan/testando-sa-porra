echo ~ //Diz em qual pasta vc esta
----------------------------------------------------------------------
cd ~   // Acessa diretórios a partir do qual vc esta
----------------------------------------------------------------------
git init //Inicia um respositório git
|-git init <nome da pasta> // cria um respositorio com o nome especificado
----------------------------------------------------------------------
git status //Diz a situação dos arquivos no repositório (se esta rastreado ou se foi modificado)
----------------------------------------------------------------------
git add <nome do arquivo ou pasta> // adiciona arquivos ou pastas não traqueadas
|-git add . //Adiciona todos os arquivos ou pastas não traqueadas
----------------------------------------------------------------------
git commit -m //Comita a situação(status) atual dos arquivos
|-git commit -am //Comita os arquivos adicionas e os modificados que ja estejam no area de stage
----------------------------------------------------------------------
git branch // Mostra todas as branchs do repositório
|-git branch -v //Além de mostrar as branchs mostra para quais commits
    essas branches estão apontando
|-git branch -r //Mostrara as branches remotas ,ou seja as branch que vieram
  de um repositório remoto, ela é apresentada da seguinte forma
  <nome que aponta para o repositório remoto>/<nome de branch> ,exemplo:
  origin/master
|-git branch -a //Mostra tanto as branches locais quanto as remotas
|-git branch -d <nome da branch> //Deleta uma branch em que nela ainda não
  foi executado nenhum commit
|-git branch -D <nome da branch> //Deleta uma branch mesmo se nela ja houveram
  commits
|-git branch --no-merged //Mostra quais branches ainda não foram mescladas
|git branch --merged //Mostra as branches ja mescladas
----------------------------------------------------------------------
|git merge <nome da branch> -m <"Mensagem"> //Mescla a branch especificada
  com a branch master
    ▲-Esse comando vai criar um novo commit se referindo a essa mesclagem,esse
    commit tera dois pais cada um sendo os ultimos commits das duas branches anteriores
|-git merge <nome da branch> -m --no-ff <"Mensagem">//Força a criação de um commit de merge
  ▲-se desde que a branch a ser mesclada não ocorreu um novo commit na branch master então
    não sera executado um commit de merge, esse tipo de merge é conhecido como merge fast foward
    ,para que isso não ocorra utilizamos a opção --no-ff na hora de fazermos o merge
----------------------------------------------------------------------
git rebase <nome da branch> //É outra forma de fazer um merge sem encher o histórico
  com commits de merge,esse comando ira basicamente voltar ao estado de quando a branch
  especificada foi criada e aplicar os commits feitos nela na branch anterior,refazendo ela.
----------------------------------------------------------------------
git log // Mostra todos o commits realizados
|-git log -n <x> //Mostra os <x> ultimos commits realizados
|-git log --oneline //Mostra os commits em apenas ua linha
|-git log --stat //Mostra um resumo dos arquivos alterados, com o número de linhas adicionadas e removidas
|-git log --parents //Mostra os commists com seus respectivos commits-pai
|-git log --decorate //Destaca o commit para qual a branch atual esta apontando

----------------------------------------------------------------------
MANDANDO COMMITS PARA O GITHUB-----------------------------------
| git remote add <origin> <link do seu repositório> // Aponta o nome <origin> para o repositório remoto no link especificado
|
|git push origin master // Manda os commits realizados para o repositório no github
|
|git clone <link do repositorio> //clona o repositorio remoto do link especificado
----------------------------------------------------------------------
git remote //Mostra os nomes que estão apontados para repositórios remotos
|-git remote -v //Alem de mostrar os nome mostra os detalhes como a URL
    de leitura (fetch) e a URL de escrita (push)
|-git remote rename <nome antigo> <nome novo> //Renomeia o nome de um repositório remoto
|-git remote set-url <nome do repositorio> //Muda a URL do nome de um repositóro remoto
----------------------------------------------------------------------
|-git push <nome do repositorio> <branch> //Envia os commits realizados para
  o repositorio remoto especificado na branch especificada
|-git push <nome do repositorio remoto> :<branch> //Esses dois pontos rão remover
  a branch la no repositório remoto
|-git push <nome do repositório remoto> <nome da tag> //Ira mandar a tag especificada para o
  repositório remoto especificado
|-git push <nome do repositório remoto> --tags //Ira mandar todas as tag para p repositório
  especificado
----------------------------------------------------------------------
git clone <URL do repositório> //Cria uma cópia do repositório na sua maquina
----------------------------------------------------------------------
git pull <nome do repositório> <branch> //Irá sincronizar o seu repositório local com
  o repositório do servidor,ou seja,atualizar os commits que não vieram da sua maquina.
|-git pull --rebase //Ira sincronizar todos o commits e fazer um rebase na branch master
----------------------------------------------------------------------
TAGS
Irão apontar para um commit especifico
  ▲-não podem conter alguns caracteres especiais como ~, ^ e :, além de
  sequências de caracteres como .. e @{.
|-git tag //Ira listar todas as tags
|-git tag <nome da tag> //Ira tagear o ultimos commit com o nome especificado
|-git tag <nome da tag> <código do commit> //Ira tagear o commit especificado com
  o nome especificado
|-git -d <nome da tag>//Ira deletar a tag especificada
|-git tag -a <nome da tag> -m <mensagem descritiva> //Nesse caso podera se colocar
  algumas informações adicionais na tag criada
----------------------------------------------------------------------
git show -s <nome da tag>//Ira mostrar detalhes da tag especificada
----------------------------------------------------------------------
AREA DE STAGE - A partir do momento que adicionamos um arquivo pela primeira vez ele entra na area de stage
,agora qualquer modficação será rastreada pelo git.
----------------------------------------------------------------------
.gitignore //Arquivo txt que contem todos arquivos ou pastas que o git deve ignorar
|-<nome do arquivo>.<extenção do arquivo> //O git via ignorar esse arquivo
|-<nome da pasta>/ // O git vai ignorar essa pasta e todos os arquivos dentro dela
|-*.<nome da extenção> // Git vai ignorar todos arquivos com essa extenção
|-<nome da pasta>/*.<nome da extenção> //O git vai iginorar todos arquivos com a extenção expecificada na pasta expecificada
----------------------------------------------------------------------
git diff //Mostras as alterações que ocorreram nos arquivos que estão fora da area de stage em comparação com o ultimo commit
|-git diff <nome do arquivo> //Mostra apenas as alterações que ocorreram no arquivo especificado
|-git diff --staged //Compara o aquivo na area de stage com o ultimo commit realizado
|-PARA COMPARARMOS OS ARQUIVOS TANTO NA AREA DE STAGE QUANTO OS QUE NÃO FORAM RASTREADOS
  EM RELAÇÃO AO ULTIMOS COMMIT DEVEMOS PEGAR O CÓDIGO DO COMMIT(COM git log -n 1 --oneline)
  E EXECUTAR git diff <código_do_commit>
|-git diff <código de um commit>..<código de outro commit>//Mostra as diferenças entre dois commits especificos
|-git diff <código de um commit>~3//Mostra a diferença entre o commit do código especificado em relação aos
  ultimos 3 ultimos realizados anteriormente.
  ▲-Este comando vai considerar tambem os arquivos na area de stage e os modificados
----------------------------------------------------------------------
git rm <nome do arquivo> //Remove um arquivo do repositório e ja adiciona a remoção a area de stage
▲-Para que a remoção seja efetuada de verdade ela deve ser commitada
----------------------------------------------------------------------
git mv <nome antigo> <nome novo>//Renomeia um arquivo especifico
▲-Essa mudança vai ser adicionada na area de stage para que isso fique gravado
  no histórico devemos commitar isso.
|-git mv <nome do arquivo> <nova pasta>/<nome do arquivo>//Move o arquivo para
  a nova pasta especificada
  ▲-Essa nova pasta ja deve estar criada antes da transferencia.
  ▲-A mudança de pasta tambem deve ser commitada para ficar gravada no
    histórico.
----------------------------------------------------------------------
git checkout <nome da branch> //Troca para branch especificada
|-git checkout -b <nome da nova branch> //Cria uma nova branch e ja troca pra ela
|-git checkout -b <nome da nova branch> <branch remota>//Cria uma nova branch
  a partir de uma ja existente sendo ela remota ou não,esses tipos de branches
  são conhecidos como tracking branches
|-git checkout -t <branch remota> //Cria uma branch a partir de uma branch remota
    sem ter que especificar o nome da nova branch, ele ira ter o nome da branch remota
|-git checkout -- <nome do arquivo> //Remove as mudanças feitas que ainda
  não foram para area de stage
  git checkout 'master@{7 days ago}' -- path/to/file.txt

----------------------------------------------------------------------
|git fetch <nome repositório remoto> // Ira buscar os novos commits no repositório
  remoto
  --------    --------------------------------------------------------------
git reset -- <nome do arquivo> //Retira o arquivo da area de stage e ele
  fica como se não tivesse sido rastrado
  |-git reset //Mesma coisa que o anterior mas vai se aplicar a todos os arquivos
  |-git reset --hard//Retira todos os arquivos da area de stage e remove as
    alterações feitas desde o ultimo commit.(Basicamente retorna ao ultimo
    commit.)
----------------------------------------------------------------------
git revert --no-edit <código de um commit> - voltara o estado para o código do
commit especificado
▲-Porem esse retorno ficara registrado no histórico oque é muito mais recomendado
----------------------------------------------------------------------
O CÓDIGO DO ULTIMO COMMIT PODE SER SUBSTITUIDO POR HEAD PORÉM ISSO PODE MUDAR
----------------------------------------------------------------------
PROTOCOLOS SUPORTADOS PELO GIT:
  -Local
  -SSH
  -HTTP ou HTTPS
  -Git
----------------------------------------------------------------------
Coisas do GitHub

-Issue Tracker: para criação e gestão de bugs e milestones do projeto;
-Pull Requests: para que outros usuários possam enviar seus commits
 com alterações no projeto, ou commits com correções de bugs;
-Commit Comments: para que os usuários possam comentar e discutir
 sobre as modificações no código, de um determinado commit.
 ----------------------------------------------------------------------
Fork //Faz uma cópia de um repositório no git hub para sua conta no github

 ----------------------------------------------------------------------
marge tool- ferramenta para manipular conflitos
